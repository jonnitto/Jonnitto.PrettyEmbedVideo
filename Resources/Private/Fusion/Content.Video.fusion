prototype(Jonnitto.PrettyEmbedVideo:Content.Video) < prototype(Jonnitto.PrettyEmbed:Content) {
    @propTypes {
        // These properties are already defined in Jonnitto.PrettyEmbed:Content
        label = ${PropTypes.string}
        id = ${PropTypes.string}
        async = ${PropTypes.boolean}
        debug = ${PropTypes.boolean}
        class = ${PropTypes.anyOf( PropTypes.string, PropTypes.arrayOf( PropTypes.string ) )}
        maximumWidth = ${PropTypes.integer}
        wrapper = ${PropTypes.anyOf(PropTypes.string, PropTypes.boolean)}
        loadImageStrategy = ${PropTypes.oneOf(['lazy', 'eager', null, false])}
        width = ${PropTypes.integer}
        height = ${PropTypes.integer}
        image = ${PropTypes.instanceOf('Neos\Media\Domain\Model\ImageInterface')}
        metadata = ${PropTypes.shape({
            'duration': PropTypes.integer
        })}

        // Use this for a custom poster src set
        posterSrcset = ${PropTypes.string}

        // This can used as alternative preview
        preview = null
    }

    player = 'Video'
    videoFileTypes = ${['mp4', 'webm', 'ogg']}

    assets = ${q(node).property('assets')}
    hasExternalSwitch = ${q(node).is('[instanceof Jonnitto.PrettyEmbedVideo:Mixin.Sources]')}
    external = ${q(node).property('external')}
    externalMp4 = ${q(node).property('externalMp4')}
    externalWebm = ${q(node).property('externalWebm')}
    externalOgg = ${q(node).property('externalOgg')}

    tracks = ${q(node).property('tracks')}
    setFirstTrackToDefault = ${q(node).property('setFirstTrackToDefault')}
    label = ${q(node).filter('[instanceof Jonnitto.PrettyEmbedHelper:Mixin.Title]').property('title')}

    # Should the video be opened on a lightbox?
    lightbox = Jonnitto.PrettyEmbed:GetProperty {
        property = 'lightbox'
    }

    # If true, the browser will automatically seek back
    # to the start upon reaching the end of the video.
    loop = Jonnitto.PrettyEmbed:GetProperty {
        property = 'loop'
    }

    # If true, the browser will offer controls to allow the user to control
    # video playback, including volume, seeking, and pause/resume playback.
    controls = Jonnitto.PrettyEmbed:GetProperty {
        property = 'controls'
    }

    # Whether the video is muted upon loading. Set automatically to true if autoplay is enabled
    muted = Jonnitto.PrettyEmbed:GetProperty {
        property = 'muted'
    }

    # If true, the video automatically begins to play back as soon
    # as it can do so without stopping to finish loading the data.
    autoplay = Jonnitto.PrettyEmbed:GetProperty {
        property = 'autoplay'
    }

    # This enumerated attribute is intended to provide a hint to the browser about what
    # the author thinks will lead to the best user experience with regards to what content
    # is loaded before the video is played. It may have one of the following values:
    #  - none       Indicates that the video should not be preloaded.
    #  - metadata   Indicates that only video metadata (e.g. length) is fetched.
    #  - auto       Indicates that the whole video file can be downloaded, even if the user is not expected to use it
    preload = Jonnitto.PrettyEmbed:GetProperty {
        property = 'preload'
    }

    # https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin
    # anonymous || use-credentials
    crossorigin = Jonnitto.PrettyEmbed:GetProperty {
        property = 'crossorigin'
    }

    // Internal
    _posterThumbnail = ${Jonnitto.PrettyEmbedHelper.createThumbnail(this.image, this.maximumWidth)}
    _posterThumbnail.@if.hasImage = ${this.image}

    renderer = Neos.Fusion:Component {
        @apply {
            props = ${props}
            overwrite = Neos.Fusion:DataStructure {
                posterWidth = ${props._posterThumbnail ? props._posterThumbnail.width : null}
                posterHeight = ${props._posterThumbnail ? props._posterThumbnail.height : null}
                poster = Neos.Fusion:Case {
                    hasThumbnail {
                        condition = ${props._posterThumbnail}
                        renderer = Neos.Fusion:ResourceUri {
                            resource = ${props._posterThumbnail.resource}
                        }
                    }
                    hasPersistentResource {
                        condition = ${props.image}
                        renderer = Neos.Neos:ImageUri {
                            asset = ${props.image}
                            async = ${props.async}
                            maximumWidth = ${props.maximumWidth}
                        }
                    }
                }
                poster2x = Neos.Neos:ImageUri {
                    @if {
                        noCustomSrcSet = ${!props.posterSrcset}
                        noCustomPreview = ${!props.preview}
                        hasAsset = ${props.image}
                        hasEnoughPixel = ${props.image.width >= props.maximumWidth * 2}
                    }
                    asset = ${props.image}
                    async = ${props.async}
                    maximumWidth = ${props.maximumWidth * 2}
                }
                assets = Neos.Fusion:Loop {
                    items = ${props.videoFileTypes}
                    itemName = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        items = ${props.assets}
                        itemRenderer = Jonnitto.PrettyEmbed:Presentation.Source {
                            type = 'video'
                            asset = ${item}
                            fileextension = ${fileextension}
                        }
                    }
                }
                external = Neos.Fusion:Loop {
                    items = Neos.Fusion:DataStructure {
                        mp4 = ${Type.isString(props.externalMp4) ? String.trim(props.externalMp4) : null}
                        webm = ${Type.isString(props.externalWebm) ? String.trim(props.externalWebm) : null}
                        ogg = ${Type.isString(props.externalOgg) ? String.trim(props.externalOgg) : null}
                        @process.filter = ${Array.filter(value)}
                    }
                    itemKey = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        // Split by line break
                        items = ${String.pregSplit(item, '/\r?\n/')}
                        itemRenderer = Jonnitto.PrettyEmbed:Presentation.Source {
                            type = 'video'
                            uri = ${String.trim(item)}
                            fileextension = ${fileextension}
                        }
                    }
                }
                sources = ${props.hasExternalSwitch ? (props.external ? this.external : this.assets) : this.assets + this.external}
                tracks = Neos.Fusion:Loop {
                    items = ${props.tracks}
                    itemRenderer = Jonnitto.PrettyEmbed:Presentation.Track {
                        default = ${props.setFirstTrackToDefault && iterator.isFirst}
                        @apply.props = ${item}
                    }
                }
            }
        }

        renderer = Neos.Fusion:Case {
            @process.debug = Neos.Fusion:Debug.Console {
                @if.debug = ${props.debug}
                package = 'PrettyEmbedVideo'
                props = ${props}
            }
            noVideoAndPoster {
                condition = ${!props.sources && !props.poster}
                renderer = afx`<Jonnitto.PrettyEmbed:Notification key='noVideoAndPoster' default='You need to define at least one video file and a preview image.' />`
            }
            noVideo {
                condition = ${!props.sources}
                renderer = afx`<Jonnitto.PrettyEmbed:Notification key='noVideo' default='You need to define at least one video.' />`
            }
            needPreviewImage {
                condition = ${!props.poster && !props.preview}
                renderer = afx`<Jonnitto.PrettyEmbed:Notification key='needPreviewImage' default='You need to define a preview image.' />`
            }
            default {
                condition = true
                renderer = afx`
                    <Jonnitto.PrettyEmbed:Presentation.Video
                        class={props.class}
                        id={props.id}
                        label={props.label}
                        preview={props.preview}
                        poster={props.poster}
                        poster2x={props.poster2x}
                        posterSrcset={props.posterSrcset}
                        posterWidth={props.posterWidth}
                        posterHeight={props.posterHeight}
                        loadImageStrategy={props.loadImageStrategy}
                        preload={props.preload}
                        crossorigin={props.crossorigin}
                        controls={props.controls}
                        lightbox={props.lightbox}
                        wrapper={props.wrapper}
                        loop={props.loop}
                        autoplay={props.autoplay}
                        muted={props.muted}
                        width={props.width}
                        height={props.height}
                        content={props.sources + props.tracks}
                    />
                `
            }
        }
    }
}
