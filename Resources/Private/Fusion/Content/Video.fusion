prototype(Jonnitto.PrettyEmbedVideo:Content.Video) < prototype(Jonnitto.PrettyEmbedHelper:Content) {
    package = 'Video'
    videoFileTypes = ${['mp4', 'webm', 'ogg']}

    assets = ${q(node).property('assets')}
    hasExternalSwitch = ${q(node).is('[instanceof Jonnitto.PrettyEmbedVideo:Mixin.Sources]')}
    external = ${q(node).property('external')}
    externalMp4 = ${q(node).property('externalMp4')}
    externalWebm = ${q(node).property('externalWebm')}
    externalOgg = ${q(node).property('externalOgg')}

    tracks = ${q(node).children('[instanceof Jonnitto.PrettyEmbedVideo:Content.Track]').get()}
    setFirstTrackToDefault = ${q(node).property('setFirstTrackToDefault')}
    title = ${q(node).filter('[instanceof Jonnitto.PrettyEmbedHelper:Mixin.Title]').property('title')}
    alternativeText = ${this.title}

    # Use this if you want to set a own Preview
    ownPreview = null

    # Should the video be opened on a lightbox?
    lightbox = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'lightbox'
    }

    # Whether the video plays inline on supported mobile devices.
    # Note that if set to false it does not imply that the video will always be played in fullscreen.
    playsinline = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'playsinline'
    }

    # If true, the browser will automatically seek back 
    # to the start upon reaching the end of the video.
    loop = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'loop'
    }

    # If true, the browser will offer controls to allow the user to control
    # video playback, including volume, seeking, and pause/resume playback.
    controls = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'controls'
    }

    # Whether the video is muted upon loading. Set automatically to true if autoplay is enabled
    muted = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'muted'
    }

    # If true, the video automatically begins to play back as soon
    # as it can do so without stopping to finish loading the data.
    autoplay = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'autoplay'
    }

    # This enumerated attribute is intended to provide a hint to the browser about what
    # the author thinks will lead to the best user experience with regards to what content
    # is loaded before the video is played. It may have one of the following values:
    #  - none       Indicates that the video should not be preloaded.
    #  - metadata   Indicates that only video metadata (e.g. length) is fetched.
    #  - auto       Indicates that the whole video file can be downloaded, even if the user is not expected to use it
    preload = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'preload'
    }

    # https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin
    # anonymous || use-credentials
    crossorigin = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'crossorigin'
    }

    width = null
    height = null

    renderer = Neos.Fusion:Component {
        @apply {
            props = ${props}
            overwrite = Neos.Fusion:DataStructure {
                poster = Neos.Neos:ImageUri {
                    @if.set = ${props.image}
                    asset = ${props.image}
                    async = true
                    maximumWidth = ${props.maximumWidth}
                }
                assets = Neos.Fusion:Loop {
                    items = ${props.videoFileTypes}
                    itemName = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        items = ${props.assets}
                        itemRenderer = Jonnitto.PrettyEmbedVideo:Component.Source {
                            asset = ${item}
                            fileextension = ${fileextension}
                        }
                    }
                }
                external = Neos.Fusion:Loop {
                    items = Neos.Fusion:DataStructure {
                        mp4 = ${Type.isString(props.externalMp4) ? String.trim(props.externalMp4) : null}
                        webm = ${Type.isString(props.externalWebm) ? String.trim(props.externalWebm) : null}
                        ogg = ${Type.isString(props.externalOgg) ? String.trim(props.externalOgg) : null}
                        @process.filter = ${Array.filter(value)}
                    }
                    itemKey = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        // Split by line break
                        items = ${String.pregSplit(item, '/\r?\n/')}
                        itemRenderer = Jonnitto.PrettyEmbedVideo:Component.Source {
                            uri = ${String.trim(item)}
                            fileextension = ${fileextension}
                        }
                    }
                }
                sources = ${props.hasExternalSwitch ? (props.external ? this.external : this.assets) : this.assets + this.external}
                tracks = Neos.Fusion:Loop {
                    items = ${props.tracks}
                    itemRenderer = Jonnitto.PrettyEmbedVideo:Content.Track {
                        contentElement = false
                        node = ${item}
                        default = ${iterator.isFirst && props.setFirstTrackToDefault}
                    }
                }
            }
        }

        renderer = Neos.Fusion:Case {
            noVideoAndPoster {
                condition = ${!props.sources && !props.poster}
                renderer = afx`<Jonnitto.PrettyEmbedHelper:Notification key='noVideoAndPoster' default='You need to define at least one video file and a preview image.' />`
            }
            noVideo {
                condition = ${!props.sources}
                renderer = afx`<Jonnitto.PrettyEmbedHelper:Notification key='noVideo' default='You need to define at least one video.' />`
            }
            noPoster {
                condition = ${!props.poster}
                renderer = afx`<Jonnitto.PrettyEmbedHelper:Notification key='noPoster' default='You need to define a preview image.' />`
            }
            default {
                condition = true
                renderer = afx`
                    <Jonnitto.PrettyEmbedVideo:Component.Video {...props} />
                    <Jonnitto.PrettyEmbedVideo:Component.Backend setFirstTrackToDefault={props.setFirstTrackToDefault} />
                `
            }
        }
    }
}
